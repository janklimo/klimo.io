<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Klimo.io</title>
    <link>/</link>
    <description>Recent content on Klimo.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Jan Klimo</copyright>
    <lastBuildDate>Tue, 17 Sep 2019 00:00:00 +0700</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What Is Your App&#39;s MRR?</title>
      <link>/posts/what-is-your-apps-mrr/</link>
      <pubDate>Tue, 17 Sep 2019 00:00:00 +0700</pubDate>
      
      <guid>/posts/what-is-your-apps-mrr/</guid>
      <description>One of the most useful features I&amp;rsquo;d love to see Shopify add to the Partners portal is a chart of your MRR (monthly recurring revenue).
This answers a simple question of What is the current value of all of my active recurring charges? In other words, how much money will you receive in the next 30 days?
There is one problem with the Earnings chart:
It&amp;rsquo;s a lagging indicator showing you the last 30 days.</description>
    </item>
    
    <item>
      <title>Automating AWS Workflows</title>
      <link>/posts/automating-aws-workflows/</link>
      <pubDate>Sat, 10 Aug 2019 00:00:00 +0700</pubDate>
      
      <guid>/posts/automating-aws-workflows/</guid>
      <description>This article shows you how to use AWS CLI programmatically to automate your deployment process. We&amp;rsquo;ll upload assets to S3 (specifying their ACL and caching behavior) and invalidate CloudFront cache. Starting with a local shell script, we conclude with plugging the script into our CircleCI workflow. It may be especially useful if you&amp;rsquo;re using Rails with Webpacker, but no experience with Rails is required.
 My latest Shopify app Robin PRO renders image galleries on customer stores.</description>
    </item>
    
    <item>
      <title>Speeding Things Up With Ruby Inline</title>
      <link>/posts/optimizing-performance-ruby-inline/</link>
      <pubDate>Thu, 21 Feb 2019 13:26:15 +0700</pubDate>
      
      <guid>/posts/optimizing-performance-ruby-inline/</guid>
      <description>One of the fun exercises in The Complete Guide to Rails Performance is to profile the dalli gem with ruby-prof.
After cloning the repository and running ruby-prof test/benchmark_test.rb, we get the following summary:
 %self total self wait child calls name 13.56 9.181 9.181 0.000 0.000 193917 &amp;lt;Class::IO&amp;gt;#select 8.12 9.604 5.498 0.000 4.106 275009 Dalli::Ring#binary_search 5.01 3.390 3.390 0.000 0.000 272536 Kgio::SocketMethods#kgio_write ...  That sparked my curiosity. Why is dalli spending so much time in binary_search and can it be improved?</description>
    </item>
    
    <item>
      <title></title>
      <link>/privacy-policy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/privacy-policy/</guid>
      <description>Privacy Policy Your privacy is important to us. It is our policy to respect your privacy regarding any information we may collect from you across any apps we own and operate.
We only ask for personal information when we truly need it to provide a service to you. We collect it by fair and lawful means, with your knowledge and consent. We also let you know why weâ€™re collecting it and how it will be used.</description>
    </item>
    
  </channel>
</rss>